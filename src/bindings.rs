// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * additional derives ["serde::Serialize", "serde::Deserialize", "PartialEq"]
//   * generate_unused_types
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod colinrozzi {
    pub mod genai_types {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Tool = super::super::super::colinrozzi::mcp_protocol::types::Tool;
            pub type JsonData = super::super::super::colinrozzi::mcp_protocol::types::JsonData;
            #[derive(Clone, Copy, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum MessageRole {
                User,
                Assistant,
                System,
            }
            impl ::core::fmt::Debug for MessageRole {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageRole::User => f.debug_tuple("MessageRole::User").finish(),
                        MessageRole::Assistant => {
                            f.debug_tuple("MessageRole::Assistant").finish()
                        }
                        MessageRole::System => {
                            f.debug_tuple("MessageRole::System").finish()
                        }
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ToolUse {
                pub id: _rt::String,
                pub name: _rt::String,
                pub input: JsonData,
            }
            impl ::core::fmt::Debug for ToolUse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolUse")
                        .field("id", &self.id)
                        .field("name", &self.name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ToolResult {
                pub tool_use_id: _rt::String,
                pub content: JsonData,
                pub is_error: bool,
            }
            impl ::core::fmt::Debug for ToolResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolResult")
                        .field("tool-use-id", &self.tool_use_id)
                        .field("content", &self.content)
                        .field("is-error", &self.is_error)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum MessageContent {
                Text(_rt::String),
                ToolUse(ToolUse),
                ToolResult(ToolResult),
            }
            impl ::core::fmt::Debug for MessageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageContent::Text(e) => {
                            f.debug_tuple("MessageContent::Text").field(e).finish()
                        }
                        MessageContent::ToolUse(e) => {
                            f.debug_tuple("MessageContent::ToolUse").field(e).finish()
                        }
                        MessageContent::ToolResult(e) => {
                            f.debug_tuple("MessageContent::ToolResult").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Message {
                pub role: MessageRole,
                pub content: _rt::Vec<MessageContent>,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Message")
                        .field("role", &self.role)
                        .field("content", &self.content)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum ToolChoice {
                Auto,
                Any,
                None,
                Specific(_rt::String),
            }
            impl ::core::fmt::Debug for ToolChoice {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ToolChoice::Auto => f.debug_tuple("ToolChoice::Auto").finish(),
                        ToolChoice::Any => f.debug_tuple("ToolChoice::Any").finish(),
                        ToolChoice::None => f.debug_tuple("ToolChoice::None").finish(),
                        ToolChoice::Specific(e) => {
                            f.debug_tuple("ToolChoice::Specific").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct CompletionRequest {
                pub model: _rt::String,
                pub messages: _rt::Vec<Message>,
                pub max_tokens: u32,
                pub temperature: Option<f32>,
                pub system: Option<_rt::String>,
                pub tools: Option<_rt::Vec<Tool>>,
                pub tool_choice: Option<ToolChoice>,
                pub disable_parallel_tool_use: Option<bool>,
            }
            impl ::core::fmt::Debug for CompletionRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionRequest")
                        .field("model", &self.model)
                        .field("messages", &self.messages)
                        .field("max-tokens", &self.max_tokens)
                        .field("temperature", &self.temperature)
                        .field("system", &self.system)
                        .field("tools", &self.tools)
                        .field("tool-choice", &self.tool_choice)
                        .field(
                            "disable-parallel-tool-use",
                            &self.disable_parallel_tool_use,
                        )
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum StopReason {
                EndTurn,
                MaxTokens,
                StopSequence,
                ToolUse,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for StopReason {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StopReason::EndTurn => {
                            f.debug_tuple("StopReason::EndTurn").finish()
                        }
                        StopReason::MaxTokens => {
                            f.debug_tuple("StopReason::MaxTokens").finish()
                        }
                        StopReason::StopSequence => {
                            f.debug_tuple("StopReason::StopSequence").finish()
                        }
                        StopReason::ToolUse => {
                            f.debug_tuple("StopReason::ToolUse").finish()
                        }
                        StopReason::Other(e) => {
                            f.debug_tuple("StopReason::Other").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Usage {
                pub input_tokens: u32,
                pub output_tokens: u32,
            }
            impl ::core::fmt::Debug for Usage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Usage")
                        .field("input-tokens", &self.input_tokens)
                        .field("output-tokens", &self.output_tokens)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct CompletionResponse {
                pub content: _rt::Vec<MessageContent>,
                pub id: _rt::String,
                pub model: _rt::String,
                pub role: MessageRole,
                pub stop_reason: StopReason,
                pub usage: Usage,
            }
            impl ::core::fmt::Debug for CompletionResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionResponse")
                        .field("content", &self.content)
                        .field("id", &self.id)
                        .field("model", &self.model)
                        .field("role", &self.role)
                        .field("stop-reason", &self.stop_reason)
                        .field("usage", &self.usage)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ModelPricing {
                pub input_price: f64,
                pub output_price: f64,
            }
            impl ::core::fmt::Debug for ModelPricing {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelPricing")
                        .field("input-price", &self.input_price)
                        .field("output-price", &self.output_price)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ModelInfo {
                pub id: _rt::String,
                pub display_name: _rt::String,
                pub max_tokens: u32,
                pub provider: _rt::String,
                pub pricing: Option<ModelPricing>,
            }
            impl ::core::fmt::Debug for ModelInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ModelInfo")
                        .field("id", &self.id)
                        .field("display-name", &self.display_name)
                        .field("max-tokens", &self.max_tokens)
                        .field("provider", &self.provider)
                        .field("pricing", &self.pricing)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum ProxyRequest {
                ListModels,
                GenerateCompletion(CompletionRequest),
            }
            impl ::core::fmt::Debug for ProxyRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProxyRequest::ListModels => {
                            f.debug_tuple("ProxyRequest::ListModels").finish()
                        }
                        ProxyRequest::GenerateCompletion(e) => {
                            f.debug_tuple("ProxyRequest::GenerateCompletion")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum ProxyResponse {
                ListModels(_rt::Vec<ModelInfo>),
                Completion(CompletionResponse),
                Error(_rt::String),
            }
            impl ::core::fmt::Debug for ProxyResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ProxyResponse::ListModels(e) => {
                            f.debug_tuple("ProxyResponse::ListModels").field(e).finish()
                        }
                        ProxyResponse::Completion(e) => {
                            f.debug_tuple("ProxyResponse::Completion").field(e).finish()
                        }
                        ProxyResponse::Error(e) => {
                            f.debug_tuple("ProxyResponse::Error").field(e).finish()
                        }
                    }
                }
            }
        }
    }
    pub mod mcp_protocol {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type JsonData = _rt::Vec<u8>;
            pub type ProgressToken = _rt::String;
            pub type Cursor = _rt::String;
            pub type RequestId = _rt::String;
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct BaseMetadata {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for BaseMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BaseMetadata")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcRequest {
                pub jsonrpc: _rt::String,
                pub method: _rt::String,
                pub params: Option<JsonData>,
                pub id: RequestId,
            }
            impl ::core::fmt::Debug for JsonrpcRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcRequest")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("method", &self.method)
                        .field("params", &self.params)
                        .field("id", &self.id)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcResponse {
                pub jsonrpc: _rt::String,
                pub id: RequestId,
                pub result: JsonData,
            }
            impl ::core::fmt::Debug for JsonrpcResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcResponse")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("id", &self.id)
                        .field("result", &self.result)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcNotification {
                pub jsonrpc: _rt::String,
                pub method: _rt::String,
                pub params: Option<JsonData>,
            }
            impl ::core::fmt::Debug for JsonrpcNotification {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcNotification")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("method", &self.method)
                        .field("params", &self.params)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ErrorObject {
                pub code: i32,
                pub message: _rt::String,
                pub data: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ErrorObject {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorObject")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("data", &self.data)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct JsonrpcError {
                pub jsonrpc: _rt::String,
                pub id: RequestId,
                pub error: ErrorObject,
            }
            impl ::core::fmt::Debug for JsonrpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonrpcError")
                        .field("jsonrpc", &self.jsonrpc)
                        .field("id", &self.id)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct TextContent {
                pub type_: _rt::String,
                pub text: _rt::String,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for TextContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextContent")
                        .field("type", &self.type_)
                        .field("text", &self.text)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ImageContent {
                pub type_: _rt::String,
                pub data: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ImageContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageContent")
                        .field("type", &self.type_)
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct AudioContent {
                pub type_: _rt::String,
                pub data: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for AudioContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioContent")
                        .field("type", &self.type_)
                        .field("data", &self.data)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ResourceContent {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub size: Option<u64>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ResourceContent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ResourceContent")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("size", &self.size)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Tool {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub input_schema: JsonData,
                pub output_schema: Option<JsonData>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ToolCallParams {
                pub name: _rt::String,
                pub arguments: JsonData,
            }
            impl ::core::fmt::Debug for ToolCallParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCallParams")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct McpResource {
                pub name: _rt::String,
                pub description: Option<_rt::String>,
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub annotations: Option<JsonData>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for McpResource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpResource")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("annotations", &self.annotations)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum ContentItem {
                Text(Option<TextContent>),
                Image(Option<ImageContent>),
                Audio(Option<AudioContent>),
                Resource(Option<_rt::String>),
                EmbeddedResource(Option<McpResource>),
            }
            impl ::core::fmt::Debug for ContentItem {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContentItem::Text(e) => {
                            f.debug_tuple("ContentItem::Text").field(e).finish()
                        }
                        ContentItem::Image(e) => {
                            f.debug_tuple("ContentItem::Image").field(e).finish()
                        }
                        ContentItem::Audio(e) => {
                            f.debug_tuple("ContentItem::Audio").field(e).finish()
                        }
                        ContentItem::Resource(e) => {
                            f.debug_tuple("ContentItem::Resource").field(e).finish()
                        }
                        ContentItem::EmbeddedResource(e) => {
                            f.debug_tuple("ContentItem::EmbeddedResource")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ToolCallResult {
                pub content: _rt::Vec<ContentItem>,
                pub structured_content: Option<JsonData>,
                pub is_error: Option<bool>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ToolCallResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ToolCallResult")
                        .field("content", &self.content)
                        .field("structured-content", &self.structured_content)
                        .field("is-error", &self.is_error)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct McpResourceContents {
                pub uri: _rt::String,
                pub mime_type: Option<_rt::String>,
                pub content: ContentItem,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for McpResourceContents {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("McpResourceContents")
                        .field("uri", &self.uri)
                        .field("mime-type", &self.mime_type)
                        .field("content", &self.content)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct PaginatedResult {
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for PaginatedResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PaginatedResult")
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ListToolsResult {
                pub tools: _rt::Vec<Tool>,
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ListToolsResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListToolsResult")
                        .field("tools", &self.tools)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ListResourcesResult {
                pub resources: _rt::Vec<McpResource>,
                pub next_cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for ListResourcesResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ListResourcesResult")
                        .field("resources", &self.resources)
                        .field("next-cursor", &self.next_cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct PaginatedRequest {
                pub cursor: Option<Cursor>,
                pub meta: Option<JsonData>,
            }
            impl ::core::fmt::Debug for PaginatedRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PaginatedRequest")
                        .field("cursor", &self.cursor)
                        .field("meta", &self.meta)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod theater {
    pub mod simple {
        /// # Common Type Definitions
        ///
        /// Defines shared types used across multiple interfaces in the Theater system.
        /// This interface serves as a central location for type definitions to ensure
        /// consistency and avoid duplication.
        ///
        /// ## Purpose
        ///
        /// The types interface provides common data structures and type aliases used
        /// throughout the Theater system. These types represent core concepts such as:
        ///
        /// - Message formats
        /// - Event chain structures
        /// - Identifiers
        ///
        /// By centralizing these definitions, the system maintains type consistency
        /// across different interfaces and components.
        ///
        /// ## Example
        ///
        /// These types are typically imported and used in actor implementations:
        ///
        /// ```rust
        /// use ntwk::theater::types::actor_id;
        ///
        /// // Using actor-id for referring to actors
        /// fn get_actor_info(id: actor_id) -> String {
        /// format!("Info for actor {}", id)
        /// }
        /// ```
        ///
        /// ## Implementation Notes
        ///
        /// - Most types are designed to be serialization-format agnostic
        /// - The `list<u8>` (byte array) representation allows for flexible serialization
        /// - Actors typically use serde-compatible formats for serialization/deserialization
        /// Define a shared type for messages
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Unique identifier for an actor
            ///
            /// Actors are identified by string identifiers throughout the system. These
            /// identifiers are typically UUIDs or other unique strings.
            pub type ActorId = _rt::String;
            /// Unique identifier for a channel
            ///
            /// Channels are communication pathways between actors or between actors and
            /// external systems. They are identified by string identifiers.
            pub type ChannelId = _rt::String;
            /// Response to a channel connection request
            ///
            /// When an actor is asked to accept a channel connection, it responds with
            /// this structure to indicate acceptance and provide an optional initial message.
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ChannelAccept {
                /// Whether the channel connection was accepted
                pub accepted: bool,
                /// Optional initial message to send on the channel
                pub message: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for ChannelAccept {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChannelAccept")
                        .field("accepted", &self.accepted)
                        .field("message", &self.message)
                        .finish()
                }
            }
            /// Core event structure
            ///
            /// Represents a single event in an actor's history, including its type,
            /// parent reference, and associated data.
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Event {
                /// Type of event (e.g., "http", "message", "wasm")
                pub event_type: _rt::String,
                /// Optional reference to parent event (previous in chain)
                pub parent: Option<u64>,
                /// Serialized event data
                pub data: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("event-type", &self.event_type)
                        .field("parent", &self.parent)
                        .field("data", &self.data)
                        .finish()
                }
            }
            /// Event with associated metadata
            ///
            /// Represents a single event in the chain with its metadata (hash),
            /// allowing for verification and referencing.
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct MetaEvent {
                /// Hash of the event, used for verification and referencing
                pub hash: u64,
                /// The actual event data
                pub event: Event,
            }
            impl ::core::fmt::Debug for MetaEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MetaEvent")
                        .field("hash", &self.hash)
                        .field("event", &self.event)
                        .finish()
                }
            }
            /// Complete event chain for an actor
            ///
            /// Represents the full history of events that have occurred in an actor,
            /// providing traceability and auditability.
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Chain {
                /// List of events in the chain, each with metadata
                pub events: _rt::Vec<MetaEvent>,
            }
            impl ::core::fmt::Debug for Chain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Chain").field("events", &self.events).finish()
                }
            }
            /// # Event in a chain
            ///
            /// Represents a single event in an actor's chain (audit log).
            ///
            /// ## Fields
            ///
            /// * `hash` - Unique identifier/hash for this event
            /// * `parent-hash` - Hash of the previous event in the chain (None for first event)
            /// * `event-type` - Type of event (e.g., "wasm", "http", "message")
            /// * `data` - Serialized event data
            /// * `timestamp` - Timestamp when the event occurred (milliseconds since epoch)
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ChainEvent {
                pub hash: _rt::Vec<u8>,
                pub parent_hash: Option<_rt::Vec<u8>>,
                pub event_type: _rt::String,
                pub data: _rt::Vec<u8>,
                pub timestamp: u64,
            }
            impl ::core::fmt::Debug for ChainEvent {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChainEvent")
                        .field("hash", &self.hash)
                        .field("parent-hash", &self.parent_hash)
                        .field("event-type", &self.event_type)
                        .field("data", &self.data)
                        .field("timestamp", &self.timestamp)
                        .finish()
                }
            }
            /// Actor error
            #[repr(u8)]
            #[derive(
                Clone,
                Copy,
                Eq,
                Ord,
                PartialEq,
                PartialOrd,
                serde::Deserialize,
                serde::Serialize
            )]
            pub enum WitErrorType {
                OperationTimeout,
                ChannelClosed,
                ShuttingDown,
                FunctionNotFound,
                TypeMismatch,
                Internal,
                SerializationError,
                UpdateComponentError,
                Paused,
            }
            impl ::core::fmt::Debug for WitErrorType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitErrorType::OperationTimeout => {
                            f.debug_tuple("WitErrorType::OperationTimeout").finish()
                        }
                        WitErrorType::ChannelClosed => {
                            f.debug_tuple("WitErrorType::ChannelClosed").finish()
                        }
                        WitErrorType::ShuttingDown => {
                            f.debug_tuple("WitErrorType::ShuttingDown").finish()
                        }
                        WitErrorType::FunctionNotFound => {
                            f.debug_tuple("WitErrorType::FunctionNotFound").finish()
                        }
                        WitErrorType::TypeMismatch => {
                            f.debug_tuple("WitErrorType::TypeMismatch").finish()
                        }
                        WitErrorType::Internal => {
                            f.debug_tuple("WitErrorType::Internal").finish()
                        }
                        WitErrorType::SerializationError => {
                            f.debug_tuple("WitErrorType::SerializationError").finish()
                        }
                        WitErrorType::UpdateComponentError => {
                            f.debug_tuple("WitErrorType::UpdateComponentError").finish()
                        }
                        WitErrorType::Paused => {
                            f.debug_tuple("WitErrorType::Paused").finish()
                        }
                    }
                }
            }
            impl WitErrorType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WitErrorType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WitErrorType::OperationTimeout,
                        1 => WitErrorType::ChannelClosed,
                        2 => WitErrorType::ShuttingDown,
                        3 => WitErrorType::FunctionNotFound,
                        4 => WitErrorType::TypeMismatch,
                        5 => WitErrorType::Internal,
                        6 => WitErrorType::SerializationError,
                        7 => WitErrorType::UpdateComponentError,
                        8 => WitErrorType::Paused,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct WitActorError {
                pub error_type: WitErrorType,
                pub data: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for WitActorError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitActorError")
                        .field("error-type", &self.error_type)
                        .field("data", &self.data)
                        .finish()
                }
            }
        }
        /// # Runtime Interface
        ///
        /// The `runtime` interface provides core runtime capabilities to actors in the Theater system.
        /// It allows actors to access their environment, log messages, and retrieve their event chain.
        ///
        /// ## Purpose
        ///
        /// This interface serves as a bridge between the actor and its execution environment,
        /// providing essential services for operation, debugging, and state management. It enables
        /// actors to log information to the system and access their immutable event history.
        ///
        /// ## Example
        ///
        /// ```wit
        /// // Using the runtime interface in a WIT definition
        /// use theater:simple/runtime;
        ///
        /// // Using the runtime interface in a Rust implementation
        /// runtime::log("Actor initialized successfully");
        /// let my_chain = runtime::get_chain();
        /// ```
        ///
        /// ## Security
        ///
        /// The runtime interface is designed to be safe to expose to all actors, as it provides
        /// only read access to state and controlled logging functionality. It doesn't allow actors
        /// to modify runtime state or access system resources outside their sandbox.
        ///
        /// ## Implementation Notes
        ///
        /// This interface is typically implemented by the Theater runtime and automatically
        /// provided to all actors. No special configuration is required to use it, though
        /// logging behavior can be controlled through manifest settings.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod runtime {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Chain = super::super::super::theater::simple::types::Chain;
            pub type ActorId = super::super::super::theater::simple::types::ActorId;
            #[allow(unused_unsafe, clippy::all)]
            /// Logs a message to the actor's log stream.
            ///
            /// ## Purpose
            ///
            /// This function allows actors to send log messages to the Theater logging system.
            /// Messages are tagged with the actor's ID and can be viewed through the Theater CLI
            /// or event subscription system.
            ///
            /// ## Parameters
            ///
            /// * `msg` - The message to log
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// runtime::log("Processing request with ID: 12345");
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Log messages are subject to the logging level configuration specified in the actor's
            /// manifest. The Theater runtime may filter or redirect logs based on this configuration.
            pub fn log(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Retrieves the actor's event chain.
            ///
            /// ## Purpose
            ///
            /// This function provides access to the actor's complete event history as a chain of
            /// cryptographically linked events. This allows actors to inspect their state evolution
            /// and verify the integrity of their history.
            ///
            /// ## Returns
            ///
            /// * `chain` - The actor's event chain containing all recorded events
            ///
            /// ## Example
            ///
            /// ```rust
            /// // In Rust actor code
            /// let chain = runtime::get_chain();
            ///
            /// // Count events by type
            /// let mut event_counts = std::collections::HashMap::new();
            /// for event in chain.events {
            /// *event_counts.entry(event.event_type.clone()).or_insert(0) += 1;
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// The event chain is immutable and cryptographically verifiable, ensuring that actors
            /// cannot tamper with their event history. This provides a secure audit trail of all
            /// actor actions.
            pub fn get_chain() -> Chain {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "get-chain"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base13 = l2;
                    let len13 = l3;
                    let mut result13 = _rt::Vec::with_capacity(len13);
                    for i in 0..len13 {
                        let base = base13
                            .add(i * (24 + 4 * ::core::mem::size_of::<*const u8>()));
                        let e13 = {
                            let l4 = *base.add(0).cast::<i64>();
                            let l5 = *base.add(8).cast::<*mut u8>();
                            let l6 = *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = i32::from(
                                *base
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l10 = *base
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *base
                                .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len12 = l11;
                            super::super::super::theater::simple::types::MetaEvent {
                                hash: l4 as u64,
                                event: super::super::super::theater::simple::types::Event {
                                    event_type: _rt::string_lift(bytes7),
                                    parent: match l8 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l9 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>();
                                                l9 as u64
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    data: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                },
                            }
                        };
                        result13.push(e13);
                    }
                    _rt::cabi_dealloc(
                        base13,
                        len13 * (24 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result14 = super::super::super::theater::simple::types::Chain {
                        events: result13,
                    };
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn shutdown(data: Option<&[u8]>) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let (result1_0, result1_1, result1_2) = match data {
                        Some(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (1i32, ptr0.cast_mut(), len0)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/runtime")]
                    unsafe extern "C" {
                        #[link_name = "shutdown"]
                        fn wit_import3(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(result1_0, result1_1, result1_2, ptr2) };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Raw binary data type
            pub type Bytes = _rt::Vec<u8>;
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct HttpRequest {
                /// HTTP method (GET, POST, PUT, DELETE, etc.)
                pub method: _rt::String,
                /// Full request URI including query parameters
                pub uri: _rt::String,
                /// List of request headers as key-value pairs
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                /// Optional request body as binary data
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpRequest")
                        .field("method", &self.method)
                        .field("uri", &self.uri)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct HttpResponse {
                /// HTTP status code (e.g., 200, 404, 500)
                pub status: u16,
                /// List of response headers as key-value pairs
                pub headers: _rt::Vec<(_rt::String, _rt::String)>,
                /// Optional response body as binary data
                pub body: Option<Bytes>,
            }
            impl ::core::fmt::Debug for HttpResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpResponse")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct TlsConfig {
                /// Path to the certificate file
                pub cert_path: _rt::String,
                /// Path to the key file
                pub key_path: _rt::String,
            }
            impl ::core::fmt::Debug for TlsConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TlsConfig")
                        .field("cert-path", &self.cert_path)
                        .field("key-path", &self.key_path)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ServerConfig {
                /// Port to listen on, 0 means system-assigned
                pub port: Option<u16>,
                /// Host address to bind to
                pub host: Option<_rt::String>,
                /// TLS configuration for HTTPS
                pub tls_config: Option<TlsConfig>,
            }
            impl ::core::fmt::Debug for ServerConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerConfig")
                        .field("port", &self.port)
                        .field("host", &self.host)
                        .field("tls-config", &self.tls_config)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct ServerInfo {
                /// Server ID
                pub id: u64,
                /// Current listening port
                pub port: u16,
                /// Host address
                pub host: _rt::String,
                /// Whether the server is running
                pub running: bool,
                /// Number of active routes
                pub routes_count: u32,
                /// Number of active middleware
                pub middleware_count: u32,
                /// Whether WebSocket is enabled
                pub websocket_enabled: bool,
            }
            impl ::core::fmt::Debug for ServerInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ServerInfo")
                        .field("id", &self.id)
                        .field("port", &self.port)
                        .field("host", &self.host)
                        .field("running", &self.running)
                        .field("routes-count", &self.routes_count)
                        .field("middleware-count", &self.middleware_count)
                        .field("websocket-enabled", &self.websocket_enabled)
                        .finish()
                }
            }
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct MiddlewareResult {
                /// Whether to continue processing the request
                pub proceed: bool,
                /// The potentially modified request
                pub request: HttpRequest,
            }
            impl ::core::fmt::Debug for MiddlewareResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MiddlewareResult")
                        .field("proceed", &self.proceed)
                        .field("request", &self.request)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod websocket_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub enum MessageType {
                /// A text message (UTF-8 encoded)
                Text,
                /// A binary message
                Binary,
                /// A new connection was established
                Connect,
                /// The connection was closed
                Close,
                /// A ping message (for keep-alive)
                Ping,
                /// A pong message (response to ping)
                Pong,
                /// Any other message type with string identifier
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for MessageType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        MessageType::Text => f.debug_tuple("MessageType::Text").finish(),
                        MessageType::Binary => {
                            f.debug_tuple("MessageType::Binary").finish()
                        }
                        MessageType::Connect => {
                            f.debug_tuple("MessageType::Connect").finish()
                        }
                        MessageType::Close => {
                            f.debug_tuple("MessageType::Close").finish()
                        }
                        MessageType::Ping => f.debug_tuple("MessageType::Ping").finish(),
                        MessageType::Pong => f.debug_tuple("MessageType::Pong").finish(),
                        MessageType::Other(e) => {
                            f.debug_tuple("MessageType::Other").field(e).finish()
                        }
                    }
                }
            }
            /// # WebSocket Message
            ///
            /// Represents a message sent or received over a WebSocket connection.
            #[derive(Clone, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct WebsocketMessage {
                /// The type of the message
                pub ty: MessageType,
                /// Binary data payload (used for binary messages)
                pub data: Option<_rt::Vec<u8>>,
                /// Text payload (used for text messages)
                pub text: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for WebsocketMessage {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WebsocketMessage")
                        .field("ty", &self.ty)
                        .field("data", &self.data)
                        .field("text", &self.text)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_framework {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type HttpRequest = super::super::super::theater::simple::http_types::HttpRequest;
            pub type HttpResponse = super::super::super::theater::simple::http_types::HttpResponse;
            pub type ServerConfig = super::super::super::theater::simple::http_types::ServerConfig;
            pub type ServerInfo = super::super::super::theater::simple::http_types::ServerInfo;
            pub type TlsConfig = super::super::super::theater::simple::http_types::TlsConfig;
            pub type WebsocketMessage = super::super::super::theater::simple::websocket_types::WebsocketMessage;
            /// Core types
            /// Unique identifier for an HTTP server instance
            pub type ServerId = u64;
            /// Unique identifier for a registered handler function
            pub type HandlerId = u64;
            /// Unique identifier for a registered route
            pub type RouteId = u64;
            /// Unique identifier for registered middleware
            pub type MiddlewareId = u64;
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_server(
                config: &ServerConfig,
            ) -> Result<ServerId, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::theater::simple::http_types::ServerConfig {
                        port: port0,
                        host: host0,
                        tls_config: tls_config0,
                    } = config;
                    let (result1_0, result1_1) = match port0 {
                        Some(e) => (1i32, _rt::as_i32(e)),
                        None => (0i32, 0i32),
                    };
                    let (result3_0, result3_1, result3_2) = match host0 {
                        Some(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            (1i32, ptr2.cast_mut(), len2)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result7_0, result7_1, result7_2, result7_3, result7_4) = match tls_config0 {
                        Some(e) => {
                            let super::super::super::theater::simple::http_types::TlsConfig {
                                cert_path: cert_path4,
                                key_path: key_path4,
                            } = e;
                            let vec5 = cert_path4;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            let vec6 = key_path4;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (1i32, ptr5.cast_mut(), len5, ptr6.cast_mut(), len6)
                        }
                        None => {
                            (
                                0i32,
                                ::core::ptr::null_mut(),
                                0usize,
                                ::core::ptr::null_mut(),
                                0usize,
                            )
                        }
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "create-server"]
                        fn wit_import9(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1_0,
                            result1_1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result7_0,
                            result7_1,
                            result7_2,
                            result7_3,
                            result7_4,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result15 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8.add(8).cast::<i64>();
                                l11 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l12 = *ptr8.add(8).cast::<*mut u8>();
                                let l13 = *ptr8
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                _rt::string_lift(bytes14)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result15
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_server_info(
                server_id: ServerId,
            ) -> Result<ServerInfo, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "get-server-info"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(server_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result15 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0.add(8).cast::<i64>();
                                let l4 = i32::from(*ptr0.add(16).cast::<u16>());
                                let l5 = *ptr0
                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr0
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                let l8 = i32::from(
                                    *ptr0
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l9 = *ptr0
                                    .add(20 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                let l10 = *ptr0
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                let l11 = i32::from(
                                    *ptr0
                                        .add(28 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                super::super::super::theater::simple::http_types::ServerInfo {
                                    id: l3 as u64,
                                    port: l4 as u16,
                                    host: _rt::string_lift(bytes7),
                                    running: _rt::bool_lift(l8 as u8),
                                    routes_count: l9 as u32,
                                    middleware_count: l10 as u32,
                                    websocket_enabled: _rt::bool_lift(l11 as u8),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                let l13 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len14 = l13;
                                let bytes14 = _rt::Vec::from_raw_parts(
                                    l12.cast(),
                                    len14,
                                    len14,
                                );
                                _rt::string_lift(bytes14)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result15
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn start_server(server_id: ServerId) -> Result<u16, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "start-server"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(server_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result7 = match l2 {
                        0 => {
                            let e = {
                                let l3 = i32::from(
                                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u16>(),
                                );
                                l3 as u16
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn stop_server(server_id: ServerId) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "stop-server"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(server_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn destroy_server(server_id: ServerId) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "destroy-server"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(server_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_handler(
                handler_name: &str,
            ) -> Result<HandlerId, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = handler_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "register-handler"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result8 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                l4 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                let l6 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_route(
                server_id: ServerId,
                path: &str,
                method: &str,
                handler_id: HandlerId,
            ) -> Result<RouteId, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = method;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "add-route"]
                        fn wit_import3(
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(
                            _rt::as_i64(server_id),
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            _rt::as_i64(handler_id),
                            ptr2,
                        )
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result9 = match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                l5 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr2.add(8).cast::<*mut u8>();
                                let l7 = *ptr2
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_route(route_id: RouteId) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "remove-route"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(route_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_middleware(
                server_id: ServerId,
                path: &str,
                handler_id: HandlerId,
            ) -> Result<MiddlewareId, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "add-middleware"]
                        fn wit_import2(_: i64, _: *mut u8, _: usize, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(server_id),
                            ptr0.cast_mut(),
                            len0,
                            _rt::as_i64(handler_id),
                            ptr1,
                        )
                    };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result8 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                l4 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                let l6 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_middleware(
                middleware_id: MiddlewareId,
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "remove-middleware"]
                        fn wit_import1(_: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(middleware_id), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn enable_websocket(
                server_id: ServerId,
                path: &str,
                connect_handler_id: Option<HandlerId>,
                message_handler_id: HandlerId,
                disconnect_handler_id: Option<HandlerId>,
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result1_0, result1_1) = match connect_handler_id {
                        Some(e) => (1i32, _rt::as_i64(e)),
                        None => (0i32, 0i64),
                    };
                    let (result2_0, result2_1) = match disconnect_handler_id {
                        Some(e) => (1i32, _rt::as_i64(e)),
                        None => (0i32, 0i64),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "enable-websocket"]
                        fn wit_import4(
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: i64,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: i64,
                        _: i32,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(server_id),
                            ptr0.cast_mut(),
                            len0,
                            result1_0,
                            result1_1,
                            _rt::as_i64(message_handler_id),
                            result2_0,
                            result2_1,
                            ptr3,
                        )
                    };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result9 = match l5 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn send_websocket_message(
                server_id: ServerId,
                connection_id: u64,
                message: &WebsocketMessage,
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::theater::simple::websocket_types::WebsocketMessage {
                        ty: ty0,
                        data: data0,
                        text: text0,
                    } = message;
                    use super::super::super::theater::simple::websocket_types::MessageType as V2;
                    let (result3_0, result3_1, result3_2) = match ty0 {
                        V2::Text => (0i32, ::core::ptr::null_mut(), 0usize),
                        V2::Binary => (1i32, ::core::ptr::null_mut(), 0usize),
                        V2::Connect => (2i32, ::core::ptr::null_mut(), 0usize),
                        V2::Close => (3i32, ::core::ptr::null_mut(), 0usize),
                        V2::Ping => (4i32, ::core::ptr::null_mut(), 0usize),
                        V2::Pong => (5i32, ::core::ptr::null_mut(), 0usize),
                        V2::Other(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (6i32, ptr1.cast_mut(), len1)
                        }
                    };
                    let (result5_0, result5_1, result5_2) = match data0 {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result7_0, result7_1, result7_2) = match text0 {
                        Some(e) => {
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (1i32, ptr6.cast_mut(), len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "send-websocket-message"]
                        fn wit_import9(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i64,
                        _: i64,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            _rt::as_i64(server_id),
                            _rt::as_i64(&connection_id),
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result7_0,
                            result7_1,
                            result7_2,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result14 = match l10 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                _rt::string_lift(bytes13)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result14
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn close_websocket(
                server_id: ServerId,
                connection_id: u64,
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/http-framework")]
                    unsafe extern "C" {
                        #[link_name = "close-websocket"]
                        fn wit_import1(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import1(
                            _rt::as_i64(server_id),
                            _rt::as_i64(&connection_id),
                            ptr0,
                        )
                    };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod supervisor {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ChainEvent = super::super::super::theater::simple::types::ChainEvent;
            #[allow(unused_unsafe, clippy::all)]
            /// # Spawn a new child actor
            ///
            /// Creates and starts a new actor from the specified manifest file.
            ///
            /// ## Parameters
            ///
            /// * `manifest` - Path or content of the manifest file describing the actor
            /// * `init-bytes` - Optional initial state for the actor (serialized bytes)
            ///
            /// ## Returns
            ///
            /// * `Ok(string)` - ID of the newly created actor
            /// * `Err(string)` - Error message if spawning fails
            pub fn spawn(
                manifest: &str,
                init_bytes: Option<&[u8]>,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = manifest;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result2_0, result2_1, result2_2) = match init_bytes {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "spawn"]
                        fn wit_import4(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            ptr0.cast_mut(),
                            len0,
                            result2_0,
                            result2_1,
                            result2_2,
                            ptr3,
                        )
                    };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result12 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result12
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Resume a previously stopped child actor
            ///
            /// Restarts a previously created actor using an existing manifest but with a potentially
            /// new initial state.
            ///
            /// ## Parameters
            ///
            /// * `manifest` - Path or content of the manifest file describing the actor
            /// * `init-state` - Optional new initial state for the actor (serialized bytes)
            ///
            /// ## Returns
            ///
            /// * `Ok(string)` - ID of the resumed actor
            /// * `Err(string)` - Error message if resuming fails
            pub fn resume(
                manifest: &str,
                init_state: Option<&[u8]>,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = manifest;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result2_0, result2_1, result2_2) = match init_state {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "resume"]
                        fn wit_import4(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            ptr0.cast_mut(),
                            len0,
                            result2_0,
                            result2_1,
                            result2_2,
                            ptr3,
                        )
                    };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result12 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result12
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # List all child actors
            ///
            /// Retrieves a list of all children directly managed by this actor.
            ///
            /// ## Returns
            ///
            /// * `list<string>` - IDs of all child actors
            pub fn list_children() -> _rt::Vec<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "list-children"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base7 = l2;
                    let len7 = l3;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e7 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            _rt::string_lift(bytes6)
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(
                        base7,
                        len7 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result8 = result7;
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Stop a specific child actor
            ///
            /// Gracefully stops a child actor identified by its ID.
            ///
            /// ## Parameters
            ///
            /// * `child-id` - ID of the child actor to stop
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Child was successfully stopped
            /// * `Err(string)` - Error message if stopping fails
            pub fn stop_child(child_id: &str) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = child_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "stop-child"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Restart a specific child actor
            ///
            /// Stops and then starts a child actor, maintaining its ID but resetting its state.
            ///
            /// ## Parameters
            ///
            /// * `child-id` - ID of the child actor to restart
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Child was successfully restarted
            /// * `Err(string)` - Error message if restarting fails
            pub fn restart_child(child_id: &str) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = child_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "restart-child"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Get the latest state of a child actor
            ///
            /// Retrieves the current serialized state of a specified child actor.
            ///
            /// ## Parameters
            ///
            /// * `child-id` - ID of the child actor
            ///
            /// ## Returns
            ///
            /// * `Ok(option<list<u8>>)` - Current state of the child (None if no state)
            /// * `Err(string)` - Error message if retrieving state fails
            pub fn get_child_state(
                child_id: &str,
            ) -> Result<Option<_rt::Vec<u8>>, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 4 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 4
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = child_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "get-child-state"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result11 = match l3 {
                        0 => {
                            let e = {
                                let l4 = i32::from(
                                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                match l4 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l5 = *ptr1
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *ptr1
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Get event history of a child actor
            ///
            /// Retrieves the chain of events that have occurred in a child actor,
            /// providing visibility into its execution history.
            ///
            /// ## Parameters
            ///
            /// * `child-id` - ID of the child actor
            ///
            /// ## Returns
            ///
            /// * `Ok(list<chain-event>)` - List of events in the child's chain
            /// * `Err(string)` - Error message if retrieving events fails
            pub fn get_child_events(
                child_id: &str,
            ) -> Result<_rt::Vec<ChainEvent>, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = child_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/supervisor")]
                    unsafe extern "C" {
                        #[link_name = "get-child-events"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result24 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base20 = l4;
                                let len20 = l5;
                                let mut result20 = _rt::Vec::with_capacity(len20);
                                for i in 0..len20 {
                                    let base = base20
                                        .add(i * (16 + 8 * ::core::mem::size_of::<*const u8>()));
                                    let e20 = {
                                        let l6 = *base.add(0).cast::<*mut u8>();
                                        let l7 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len8 = l7;
                                        let l9 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l13 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l14 = *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 = _rt::Vec::from_raw_parts(
                                            l13.cast(),
                                            len15,
                                            len15,
                                        );
                                        let l16 = *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l17 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len18 = l17;
                                        let l19 = *base
                                            .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        super::super::super::theater::simple::types::ChainEvent {
                                            hash: _rt::Vec::from_raw_parts(l6.cast(), len8, len8),
                                            parent_hash: match l9 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l10 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        _rt::Vec::from_raw_parts(l10.cast(), len12, len12)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            event_type: _rt::string_lift(bytes15),
                                            data: _rt::Vec::from_raw_parts(l16.cast(), len18, len18),
                                            timestamp: l19 as u64,
                                        }
                                    };
                                    result20.push(e20);
                                }
                                _rt::cabi_dealloc(
                                    base20,
                                    len20 * (16 + 8 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                result20
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l21 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                _rt::string_lift(bytes23)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result24
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod random {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn random_bytes(length: u32) -> Result<_rt::Vec<u8>, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/random")]
                    unsafe extern "C" {
                        #[link_name = "random-bytes"]
                        fn wit_import1(_: i32, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i32(&length), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result9 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn random_range(min: u64, max: u64) -> Result<u64, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/random")]
                    unsafe extern "C" {
                        #[link_name = "random-range"]
                        fn wit_import1(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(_rt::as_i64(&min), _rt::as_i64(&max), ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result7 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0.add(8).cast::<i64>();
                                l3 as u64
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr0.add(8).cast::<*mut u8>();
                                let l5 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn random_float() -> Result<f64, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/random")]
                    unsafe extern "C" {
                        #[link_name = "random-float"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result7 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0.add(8).cast::<f64>();
                                l3
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr0.add(8).cast::<*mut u8>();
                                let l5 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn generate_uuid() -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/random")]
                    unsafe extern "C" {
                        #[link_name = "generate-uuid"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result9 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
        }
        /// # Message Server Host Interface
        ///
        /// Provides functions for actors to send messages to other actors and manage communication channels.
        ///
        /// ## Purpose
        ///
        /// This interface enables actors to initiate various types of communication:
        /// - Send one-way messages to other actors
        /// - Make request-response interactions with other actors
        /// - Establish and use bidirectional communication channels
        ///
        /// These functions allow actors to collaborate, share data, and coordinate their activities
        /// within the Theater system.
        ///
        /// ## Example
        ///
        /// ```rust
        /// use ntwk::theater::message_server_host;
        /// use ntwk::theater::types::actor_id;
        /// use serde_json::json;
        ///
        /// async fn example() -> Result<(), String> {
        /// // Get the target actor ID (in a real scenario)
        /// let target_actor = actor_id { id: "actor-123".to_string() };
        ///
        /// // Send a one-way message
        /// let message = json!({"action": "update", "value": 42});
        /// message_server_host::send(target_actor.clone(), message)?;
        ///
        /// // Make a request and get a response
        /// let request = json!({"action": "query", "key": "user-profile"});
        /// let response = message_server_host::request(target_actor.clone(), request)?;
        /// println!("Received response: {}", response);
        ///
        /// // Open a channel for ongoing communication
        /// let initial_msg = json!({"action": "subscribe", "topic": "updates"});
        /// let channel_id = message_server_host::open_channel(target_actor, initial_msg)?;
        ///
        /// // Send messages on the channel
        /// message_server_host::send_on_channel(channel_id.clone(), json!({"update": 1}))?;
        /// message_server_host::send_on_channel(channel_id.clone(), json!({"update": 2}))?;
        ///
        /// // Close the channel when done
        /// message_server_host::close_channel(channel_id)?;
        ///
        /// Ok(())
        /// }
        /// ```
        ///
        /// ## Security
        ///
        /// The message server enforces security boundaries to ensure that:
        /// - Actors can only communicate with actors they have permission to access
        /// - Messages are delivered reliably and in order
        /// - Channel operations are authenticated
        ///
        /// All message operations are tracked in the actor's event chain for complete auditability.
        ///
        /// ## Implementation Notes
        ///
        /// The message server operations are asynchronous but appear synchronous to the WebAssembly
        /// component. The runtime suspends the actor's execution as needed without blocking the
        /// entire system.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod message_server_host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ActorId = super::super::super::theater::simple::types::ActorId;
            pub type ChannelId = super::super::super::theater::simple::types::ChannelId;
            #[allow(unused_unsafe, clippy::all)]
            /// # Send one-way message
            ///
            /// Sends a message to another actor without waiting for a response.
            ///
            /// ## Parameters
            ///
            /// * `actor-id` - ID of the target actor
            /// * `msg` - JSON message payload to send
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Message was successfully sent
            /// * `Err(string)` - Error message if send fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            /// use ntwk::theater::types::actor_id;
            /// use serde_json::json;
            ///
            /// // Send a notification
            /// let target = actor_id { id: "logging-service".to_string() };
            /// let log_msg = json!({
            /// "level": "info",
            /// "message": "User logged in",
            /// "timestamp": 1625097600000
            /// });
            /// message_server_host::send(target, log_msg)?;
            /// ```
            ///
            /// ## Security
            ///
            /// The runtime verifies that the sender has permission to send messages to the
            /// target actor before delivery.
            pub fn send(actor_id: &str, msg: &[u8]) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = actor_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = msg;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "send"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Send request and await response
            ///
            /// Sends a message to another actor and waits for a response.
            ///
            /// ## Parameters
            ///
            /// * `actor-id` - ID of the target actor
            /// * `msg` - JSON request payload to send
            ///
            /// ## Returns
            ///
            /// * `Ok(json)` - The response from the target actor
            /// * `Err(string)` - Error message if the request fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            /// use ntwk::theater::types::actor_id;
            /// use serde_json::json;
            ///
            /// // Query a data service
            /// let data_service = actor_id { id: "data-service".to_string() };
            /// let query = json!({
            /// "query": "SELECT * FROM users WHERE id = ?",
            /// "parameters": [42]
            /// });
            /// let result = message_server_host::request(data_service, query)?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// This function suspends the calling actor's execution until a response is received
            /// or a timeout occurs. The runtime handles the suspension efficiently without
            /// blocking other actors.
            pub fn request(
                actor_id: &str,
                msg: &[u8],
            ) -> Result<_rt::Vec<u8>, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = actor_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = msg;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "request"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result11 = match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Open communication channel
            ///
            /// Establishes a bidirectional communication channel with another actor.
            ///
            /// ## Parameters
            ///
            /// * `actor-id` - ID of the target actor
            /// * `initial-msg` - JSON message sent as part of channel establishment
            ///
            /// ## Returns
            ///
            /// * `Ok(channel-id)` - ID of the established channel
            /// * `Err(string)` - Error message if channel establishment fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            /// use ntwk::theater::types::actor_id;
            /// use serde_json::json;
            ///
            /// // Open a channel to a streaming service
            /// let streaming_service = actor_id { id: "data-stream".to_string() };
            /// let subscription = json!({
            /// "action": "subscribe",
            /// "topics": ["market-data", "news-feed"],
            /// "options": {"buffer_size": 100}
            /// });
            /// let channel = message_server_host::open_channel(streaming_service, subscription)?;
            /// ```
            ///
            /// ## Security
            ///
            /// Channel establishment requires mutual consent:
            /// 1. The initiator requests the channel by calling this function
            /// 2. The target actor explicitly accepts or rejects the channel
            ///
            /// This provides a security checkpoint to prevent unwanted channels.
            pub fn open_channel(
                actor_id: &str,
                initial_msg: &[u8],
            ) -> Result<ChannelId, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = actor_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = initial_msg;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "open-channel"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result11 = match l4 {
                        0 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                _rt::string_lift(bytes10)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Send message on channel
            ///
            /// Sends a message through an established channel.
            ///
            /// ## Parameters
            ///
            /// * `channel-id` - ID of the channel to send on
            /// * `msg` - JSON message payload to send
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Message was successfully sent
            /// * `Err(string)` - Error message if send fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            /// use serde_json::json;
            ///
            /// // Send a message on an established channel
            /// let update = json!({
            /// "type": "position-update",
            /// "x": 10.5,
            /// "y": 20.3,
            /// "timestamp": 1625097600000
            /// });
            /// message_server_host::send_on_channel(channel_id, update)?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Messages sent on a channel are delivered in order. If the channel is closed
            /// or invalid, this function will return an error.
            pub fn send_on_channel(
                channel_id: &str,
                msg: &[u8],
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = channel_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = msg;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "send-on-channel"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Close channel
            ///
            /// Closes an open communication channel.
            ///
            /// ## Parameters
            ///
            /// * `channel-id` - ID of the channel to close
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Channel was successfully closed
            /// * `Err(string)` - Error message if close fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            ///
            /// // Close a channel when done with it
            /// message_server_host::close_channel(channel_id)?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Closing a channel is a final operation - once closed, a channel cannot be reopened.
            /// Both participants receive a notification when a channel is closed.
            pub fn close_channel(channel_id: &str) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = channel_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "close-channel"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # List outstanding requests
            ///
            /// Retrieves a list of all pending request IDs that haven't been responded to yet.
            ///
            /// ## Returns
            ///
            /// * `list<string>` - List of outstanding request IDs
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            ///
            /// // Get all pending requests
            /// let pending_requests = message_server_host::list_outstanding_requests();
            /// for request_id in pending_requests {
            /// println!("Pending request: {}", request_id);
            /// }
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// This function is useful for actors that need to track and manage asynchronous
            /// request processing. It allows actors to check for pending requests and decide
            /// which ones to process next.
            pub fn list_outstanding_requests() -> _rt::Vec<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "list-outstanding-requests"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base7 = l2;
                    let len7 = l3;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e7 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            _rt::string_lift(bytes6)
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(
                        base7,
                        len7 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result8 = result7;
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Respond to a specific request
            ///
            /// Sends a response to a previously received request identified by its ID.
            ///
            /// ## Parameters
            ///
            /// * `request-id` - ID of the request to respond to
            /// * `response` - JSON response payload to send
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Response was successfully sent
            /// * `Err(string)` - Error message if response fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            /// use serde_json::json;
            ///
            /// // Respond to a specific request
            /// let response = json!({
            /// "status": "success",
            /// "data": {
            /// "result": 42
            /// }
            /// });
            /// message_server_host::respond_to_request("req-123", response)?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// This function allows actors to implement asynchronous request handling patterns,
            /// where requests are received, processed in the background, and responded to later.
            /// If the request ID is not found, an error is returned.
            pub fn respond_to_request(
                request_id: &str,
                response: &[u8],
            ) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = request_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = response;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "respond-to-request"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result8 = match l4 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = *ptr2
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l6 = *ptr2
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len7 = l6;
                                let bytes7 = _rt::Vec::from_raw_parts(
                                    l5.cast(),
                                    len7,
                                    len7,
                                );
                                _rt::string_lift(bytes7)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// # Cancel a pending request
            ///
            /// Explicitly cancels a pending request without sending a response.
            ///
            /// ## Parameters
            ///
            /// * `request-id` - ID of the request to cancel
            ///
            /// ## Returns
            ///
            /// * `Ok(_)` - Request was successfully canceled
            /// * `Err(string)` - Error message if cancellation fails
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_host;
            ///
            /// // Cancel a request that can't be fulfilled
            /// message_server_host::cancel_request("req-123")?;
            /// ```
            ///
            /// ## Implementation Notes
            ///
            /// Canceling a request causes the requester to receive an error indicating that
            /// the request was canceled. This is useful for cleanup operations and handling
            /// error cases where a proper response cannot be generated.
            pub fn cancel_request(request_id: &str) -> Result<(), _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = request_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "theater:simple/message-server-host")]
                    unsafe extern "C" {
                        #[link_name = "cancel-request"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod theater {
        pub mod simple {
            /// # Actor Interface
            ///
            /// Defines the core interface that all Theater actors must implement. This is the
            /// fundamental contract between the Theater runtime and WebAssembly actor components.
            ///
            /// ## Purpose
            ///
            /// The actor interface establishes the minimal required functionality for a component
            /// to be recognized and managed as a Theater actor. By implementing this interface,
            /// a WebAssembly component can be:
            ///
            /// - Loaded by the Theater runtime
            /// - Initialized with state and parameters
            /// - Managed within the supervision hierarchy
            /// - Integrated with the event chain system
            ///
            /// This interface is deliberately minimal to make it as easy as possible to create
            /// compatible actors, while still providing the core functionality needed for the
            /// Theater system to manage them.
            ///
            /// ## Example
            ///
            /// Here's how a typical actor would implement this interface in Rust:
            ///
            /// ```rust
            /// use ntwk::theater::actor::Guest;
            /// use ntwk::theater::types::State;
            ///
            /// struct MyActor;
            ///
            /// impl Guest for MyActor {
            /// fn init(state: State, params: (String,)) -> Result<(State,), String> {
            /// // Parse the initial parameters
            /// let (actor_id,) = params;
            /// println!("Initializing actor with ID: {}", actor_id);
            ///
            /// // Create initial state if none exists
            /// let new_state = match state {
            /// Some(existing) => {
            /// // Use existing state
            /// existing
            /// }
            /// None => {
            /// // Create new initial state
            /// let initial_data = MyActorState {
            /// counter: 0,
            /// last_updated: chrono::Utc::now(),
            /// };
            /// serde_json::to_vec(&initial_data).map_err(|e| e.to_string())?
            /// }
            /// };
            ///
            /// // Return the new state
            /// Ok((new_state,))
            /// }
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// This interface is the primary entry point for actor execution. The Theater runtime
            /// ensures that actors can only access resources they have been explicitly granted
            /// through handler configurations.
            ///
            /// ## Implementation Notes
            ///
            /// - The state parameter is passed as a blob of bytes, typically serialized/deserialized
            /// using formats like JSON, MessagePack, or bincode.
            /// - Actors are responsible for managing their own state format and serialization.
            /// - The parameters tuple allows for flexible initialization with a variety of data types.
            /// - Returning an error string from the init function will cause the actor to fail to start.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod actor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::init(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Initialize the actor
                    ///
                    /// Called when the actor is first started or restarted. This function is responsible
                    /// for setting up the actor's initial state and responding to initialization parameters.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - Current state of the actor, or None if first initialization
                    /// * `params` - Tuple of initialization parameters, typically including actor ID
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((state,))` - The updated state to store
                    /// * `Err(string)` - An error message if initialization fails
                    ///
                    /// ## Implementation Notes
                    ///
                    /// - If state is None, the actor should create a new initial state
                    /// - If state contains data, the actor should validate and use that state
                    /// - The first parameter in the tuple is typically the actor's ID
                    /// - Any error returned will cause the actor to fail to start
                    fn init(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_actor_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/actor#init")] unsafe extern "C" fn
                        export_init(arg0 : i32, arg1 : * mut u8, arg2 : usize, arg3 : *
                        mut u8, arg4 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_init_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/actor#init")] unsafe extern "C" fn
                        _post_return_init(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_init::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_actor_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod http_handlers {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type HttpRequest = super::super::super::super::theater::simple::http_types::HttpRequest;
                pub type HttpResponse = super::super::super::super::theater::simple::http_types::HttpResponse;
                pub type WebsocketMessage = super::super::super::super::theater::simple::websocket_types::WebsocketMessage;
                pub type MiddlewareResult = super::super::super::super::theater::simple::http_types::MiddlewareResult;
                pub type HandlerId = super::super::super::super::theater::simple::http_framework::HandlerId;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_request_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg5;
                    let bytes1 = _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);
                    let len2 = arg7;
                    let bytes2 = _rt::Vec::from_raw_parts(arg6.cast(), len2, len2);
                    let base9 = arg8;
                    let len9 = arg9;
                    let mut result9 = _rt::Vec::with_capacity(len9);
                    for i in 0..len9 {
                        let base = base9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e9 = {
                            let l3 = *base.add(0).cast::<*mut u8>();
                            let l4 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                            let l6 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                        };
                        result9.push(e9);
                    }
                    _rt::cabi_dealloc(
                        base9,
                        len9 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result11 = T::handle_request(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            arg3 as u64,
                            super::super::super::super::theater::simple::http_types::HttpRequest {
                                method: _rt::string_lift(bytes1),
                                uri: _rt::string_lift(bytes2),
                                headers: result9,
                                body: match arg10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let len10 = arg12;
                                            _rt::Vec::from_raw_parts(arg11.cast(), len10, len10)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        ),
                    );
                    let ptr12 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result11 {
                        Ok(e) => {
                            *ptr12.add(0).cast::<u8>() = (0i32) as u8;
                            let (t13_0, t13_1) = e;
                            match t13_0 {
                                Some(e) => {
                                    *ptr12
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec14 = (e).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr12
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr12
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *ptr12
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t15_0,) = t13_1;
                            let super::super::super::super::theater::simple::http_types::HttpResponse {
                                status: status16,
                                headers: headers16,
                                body: body16,
                            } = t15_0;
                            *ptr12
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u16>() = (_rt::as_i32(status16)) as u16;
                            let vec20 = headers16;
                            let len20 = vec20.len();
                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec20.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result20 = if layout20.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout20);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec20.into_iter().enumerate() {
                                let base = result20
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t17_0, t17_1) = e;
                                    let vec18 = (t17_0.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base.add(0).cast::<*mut u8>() = ptr18.cast_mut();
                                    let vec19 = (t17_1.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                }
                            }
                            *ptr12
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len20;
                            *ptr12
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result20;
                            match body16 {
                                Some(e) => {
                                    *ptr12
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = (e).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr12
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *ptr12
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                }
                                None => {
                                    *ptr12
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr12.add(0).cast::<u8>() = (1i32) as u8;
                            let vec22 = (e.into_bytes()).into_boxed_slice();
                            let ptr22 = vec22.as_ptr().cast::<u8>();
                            let len22 = vec22.len();
                            ::core::mem::forget(vec22);
                            *ptr12
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len22;
                            *ptr12
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr22.cast_mut();
                        }
                    };
                    ptr12
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base11 = l5;
                            let len11 = l6;
                            for i in 0..len11 {
                                let base = base11
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l7 = *base.add(0).cast::<*mut u8>();
                                    let l8 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l10 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l9, l10, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base11,
                                len11 * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l12 = i32::from(
                                *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l12 {
                                0 => {}
                                _ => {
                                    let l13 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l14 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base15 = l13;
                                    let len15 = l14;
                                    _rt::cabi_dealloc(base15, len15 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l16 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l17 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l16, l17, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_middleware_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: i32,
                    arg11: *mut u8,
                    arg12: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg5;
                    let bytes1 = _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);
                    let len2 = arg7;
                    let bytes2 = _rt::Vec::from_raw_parts(arg6.cast(), len2, len2);
                    let base9 = arg8;
                    let len9 = arg9;
                    let mut result9 = _rt::Vec::with_capacity(len9);
                    for i in 0..len9 {
                        let base = base9
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e9 = {
                            let l3 = *base.add(0).cast::<*mut u8>();
                            let l4 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                            let l6 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                        };
                        result9.push(e9);
                    }
                    _rt::cabi_dealloc(
                        base9,
                        len9 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result11 = T::handle_middleware(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            arg3 as u64,
                            super::super::super::super::theater::simple::http_types::HttpRequest {
                                method: _rt::string_lift(bytes1),
                                uri: _rt::string_lift(bytes2),
                                headers: result9,
                                body: match arg10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let len10 = arg12;
                                            _rt::Vec::from_raw_parts(arg11.cast(), len10, len10)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        ),
                    );
                    let ptr12 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result11 {
                        Ok(e) => {
                            *ptr12.add(0).cast::<u8>() = (0i32) as u8;
                            let (t13_0, t13_1) = e;
                            match t13_0 {
                                Some(e) => {
                                    *ptr12
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec14 = (e).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr12
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr12
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *ptr12
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t15_0,) = t13_1;
                            let super::super::super::super::theater::simple::http_types::MiddlewareResult {
                                proceed: proceed16,
                                request: request16,
                            } = t15_0;
                            *ptr12
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match proceed16 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            let super::super::super::super::theater::simple::http_types::HttpRequest {
                                method: method17,
                                uri: uri17,
                                headers: headers17,
                                body: body17,
                            } = request16;
                            let vec18 = (method17.into_bytes()).into_boxed_slice();
                            let ptr18 = vec18.as_ptr().cast::<u8>();
                            let len18 = vec18.len();
                            ::core::mem::forget(vec18);
                            *ptr12
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len18;
                            *ptr12
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr18.cast_mut();
                            let vec19 = (uri17.into_bytes()).into_boxed_slice();
                            let ptr19 = vec19.as_ptr().cast::<u8>();
                            let len19 = vec19.len();
                            ::core::mem::forget(vec19);
                            *ptr12
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len19;
                            *ptr12
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr19.cast_mut();
                            let vec23 = headers17;
                            let len23 = vec23.len();
                            let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec23.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result23 = if layout23.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout23);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec23.into_iter().enumerate() {
                                let base = result23
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t20_0, t20_1) = e;
                                    let vec21 = (t20_0.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                    let vec22 = (t20_1.into_bytes()).into_boxed_slice();
                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                    let len22 = vec22.len();
                                    ::core::mem::forget(vec22);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len22;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                }
                            }
                            *ptr12
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len23;
                            *ptr12
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result23;
                            match body17 {
                                Some(e) => {
                                    *ptr12
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec24 = (e).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *ptr12
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *ptr12
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                }
                                None => {
                                    *ptr12
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr12.add(0).cast::<u8>() = (1i32) as u8;
                            let vec25 = (e.into_bytes()).into_boxed_slice();
                            let ptr25 = vec25.as_ptr().cast::<u8>();
                            let len25 = vec25.len();
                            ::core::mem::forget(vec25);
                            *ptr12
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr12
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr25.cast_mut();
                        }
                    };
                    ptr12
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_middleware<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                            let l7 = *arg0
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *arg0
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                            let l9 = *arg0
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base15 = l9;
                            let len15 = l10;
                            for i in 0..len15 {
                                let base = base15
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l11 = *base.add(0).cast::<*mut u8>();
                                    let l12 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                    let l13 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l14 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base15,
                                len15 * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l16 = i32::from(
                                *arg0
                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l16 {
                                0 => {}
                                _ => {
                                    let l17 = *arg0
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base19 = l17;
                                    let len19 = l18;
                                    _rt::cabi_dealloc(base19, len19 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l20 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l21 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l20, l21, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_websocket_connect_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: i64,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg6;
                    let bytes1 = _rt::Vec::from_raw_parts(arg5.cast(), len1, len1);
                    let result3 = T::handle_websocket_connect(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            arg3 as u64,
                            arg4 as u64,
                            _rt::string_lift(bytes1),
                            match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len2 = arg9;
                                        let bytes2 = _rt::Vec::from_raw_parts(
                                            arg8.cast(),
                                            len2,
                                            len2,
                                        );
                                        _rt::string_lift(bytes2)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0,) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_websocket_connect<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_websocket_message_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: i64,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                    arg11: i32,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    use super::super::super::super::theater::simple::websocket_types::MessageType as V2;
                    let v2 = match arg5 {
                        0 => V2::Text,
                        1 => V2::Binary,
                        2 => V2::Connect,
                        3 => V2::Close,
                        4 => V2::Ping,
                        5 => V2::Pong,
                        n => {
                            debug_assert_eq!(n, 6, "invalid enum discriminant");
                            let e2 = {
                                let len1 = arg7;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg6.cast(),
                                    len1,
                                    len1,
                                );
                                _rt::string_lift(bytes1)
                            };
                            V2::Other(e2)
                        }
                    };
                    let result5 = T::handle_websocket_message(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            arg3 as u64,
                            arg4 as u64,
                            super::super::super::super::theater::simple::websocket_types::WebsocketMessage {
                                ty: v2,
                                data: match arg8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let len3 = arg10;
                                            _rt::Vec::from_raw_parts(arg9.cast(), len3, len3)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                text: match arg11 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let len4 = arg13;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                arg12.cast(),
                                                len4,
                                                len4,
                                            );
                                            _rt::string_lift(bytes4)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        ),
                    );
                    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let (t7_0, t7_1) = e;
                            match t7_0 {
                                Some(e) => {
                                    *ptr6
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr6
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr6
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr6
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t9_0,) = t7_1;
                            let vec15 = t9_0;
                            let len15 = vec15.len();
                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec15.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15
                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::theater::simple::websocket_types::WebsocketMessage {
                                        ty: ty10,
                                        data: data10,
                                        text: text10,
                                    } = e;
                                    use super::super::super::super::theater::simple::websocket_types::MessageType as V12;
                                    match ty10 {
                                        V12::Text => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                        }
                                        V12::Binary => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                        }
                                        V12::Connect => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                        }
                                        V12::Close => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                        }
                                        V12::Ping => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                        }
                                        V12::Pong => {
                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                        }
                                        V12::Other(e) => {
                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                            let vec11 = (e.into_bytes()).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len11;
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr11.cast_mut();
                                        }
                                    }
                                    match data10 {
                                        Some(e) => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec13 = (e).into_boxed_slice();
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            ::core::mem::forget(vec13);
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len13;
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr13.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match text10 {
                                        Some(e) => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec14 = (e.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr6
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len15;
                            *ptr6
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result15;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec16 = (e.into_bytes()).into_boxed_slice();
                            let ptr16 = vec16.as_ptr().cast::<u8>();
                            let len16 = vec16.len();
                            ::core::mem::forget(vec16);
                            *ptr6
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr6
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr16.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_websocket_message<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = *arg0
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base17 = l5;
                            let len17 = l6;
                            for i in 0..len17 {
                                let base = base17
                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l7 = i32::from(*base.add(0).cast::<u8>());
                                    match l7 {
                                        0 => {}
                                        1 => {}
                                        2 => {}
                                        3 => {}
                                        4 => {}
                                        5 => {}
                                        _ => {
                                            let l8 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                    }
                                    let l10 = i32::from(
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l10 {
                                        0 => {}
                                        _ => {
                                            let l11 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base13 = l11;
                                            let len13 = l12;
                                            _rt::cabi_dealloc(base13, len13 * 1, 1);
                                        }
                                    }
                                    let l14 = i32::from(
                                        *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l14 {
                                        0 => {}
                                        _ => {
                                            let l15 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l16 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l15, l16, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base17,
                                len17 * (9 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l18 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l18, l19, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_websocket_disconnect_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i64,
                    arg4: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result1 = T::handle_websocket_disconnect(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (arg3 as u64, arg4 as u64),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let (t3_0,) = e;
                            match t3_0 {
                                Some(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_websocket_disconnect<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn handle_request(
                        state: Option<_rt::Vec<u8>>,
                        params: (HandlerId, HttpRequest),
                    ) -> Result<(Option<_rt::Vec<u8>>, (HttpResponse,)), _rt::String>;
                    fn handle_middleware(
                        state: Option<_rt::Vec<u8>>,
                        params: (HandlerId, HttpRequest),
                    ) -> Result<
                        (Option<_rt::Vec<u8>>, (MiddlewareResult,)),
                        _rt::String,
                    >;
                    fn handle_websocket_connect(
                        state: Option<_rt::Vec<u8>>,
                        params: (HandlerId, u64, _rt::String, Option<_rt::String>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    fn handle_websocket_message(
                        state: Option<_rt::Vec<u8>>,
                        params: (HandlerId, u64, WebsocketMessage),
                    ) -> Result<
                        (Option<_rt::Vec<u8>>, (_rt::Vec<WebsocketMessage>,)),
                        _rt::String,
                    >;
                    fn handle_websocket_disconnect(
                        state: Option<_rt::Vec<u8>>,
                        params: (HandlerId, u64),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_http_handlers_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/http-handlers#handle-request")] unsafe extern "C"
                        fn export_handle_request(arg0 : i32, arg1 : * mut u8, arg2 :
                        usize, arg3 : i64, arg4 : * mut u8, arg5 : usize, arg6 : * mut
                        u8, arg7 : usize, arg8 : * mut u8, arg9 : usize, arg10 : i32,
                        arg11 : * mut u8, arg12 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_request_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                        arg11, arg12) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/http-handlers#handle-request")] unsafe
                        extern "C" fn _post_return_handle_request(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_handle_request::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "theater:simple/http-handlers#handle-middleware")] unsafe extern
                        "C" fn export_handle_middleware(arg0 : i32, arg1 : * mut u8, arg2
                        : usize, arg3 : i64, arg4 : * mut u8, arg5 : usize, arg6 : * mut
                        u8, arg7 : usize, arg8 : * mut u8, arg9 : usize, arg10 : i32,
                        arg11 : * mut u8, arg12 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_middleware_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                        arg10, arg11, arg12) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/http-handlers#handle-middleware")]
                        unsafe extern "C" fn _post_return_handle_middleware(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_middleware::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/http-handlers#handle-websocket-connect")] unsafe
                        extern "C" fn export_handle_websocket_connect(arg0 : i32, arg1 :
                        * mut u8, arg2 : usize, arg3 : i64, arg4 : i64, arg5 : * mut u8,
                        arg6 : usize, arg7 : i32, arg8 : * mut u8, arg9 : usize,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_websocket_connect_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/http-handlers#handle-websocket-connect")]
                        unsafe extern "C" fn _post_return_handle_websocket_connect(arg0 :
                        * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_websocket_connect::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "theater:simple/http-handlers#handle-websocket-message")] unsafe
                        extern "C" fn export_handle_websocket_message(arg0 : i32, arg1 :
                        * mut u8, arg2 : usize, arg3 : i64, arg4 : i64, arg5 : i32, arg6
                        : * mut u8, arg7 : usize, arg8 : i32, arg9 : * mut u8, arg10 :
                        usize, arg11 : i32, arg12 : * mut u8, arg13 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*::
                        _export_handle_websocket_message_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12,
                        arg13) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/http-handlers#handle-websocket-message")]
                        unsafe extern "C" fn _post_return_handle_websocket_message(arg0 :
                        * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_websocket_message::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "theater:simple/http-handlers#handle-websocket-disconnect")]
                        unsafe extern "C" fn export_handle_websocket_disconnect(arg0 :
                        i32, arg1 : * mut u8, arg2 : usize, arg3 : i64, arg4 : i64,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_websocket_disconnect_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/http-handlers#handle-websocket-disconnect")]
                        unsafe extern "C" fn
                        _post_return_handle_websocket_disconnect(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_handle_websocket_disconnect::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_http_handlers_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 14 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 14
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// # Message Server Client Interface
            ///
            /// Defines the callback handlers that actors must implement to receive messages through
            /// the message server system.
            ///
            /// ## Purpose
            ///
            /// This interface enables actors to receive and process various types of messages:
            /// - One-way messages (send)
            /// - Request-response interactions (request)
            /// - Bidirectional channel-based communication (channel operations)
            ///
            /// By implementing these handler functions, an actor can participate in different
            /// communication patterns with other actors and external systems.
            ///
            /// ## Example
            ///
            /// ```rust
            /// use ntwk::theater::message_server_client::Guest;
            /// use ntwk::theater::types::{channel_accept, channel_id};
            /// use serde_json::{json, Value};
            ///
            /// struct MyMessageHandler;
            ///
            /// impl Guest for MyMessageHandler {
            /// fn handle_send(state: Option<Value>, params: (Value,))
            /// -> Result<(Option<Value>,), String> {
            /// let (message,) = params;
            /// println!("Received message: {}", message);
            ///
            /// // Update state if needed
            /// let new_state = if let Some(mut state) = state {
            /// state["message_count"] = json!(state["message_count"].as_u64().unwrap_or(0) + 1);
            /// Some(state)
            /// } else {
            /// Some(json!({"message_count": 1}))
            /// };
            ///
            /// Ok((new_state,))
            /// }
            ///
            /// // Implement other handlers...
            /// }
            /// ```
            ///
            /// ## Security
            ///
            /// The message handlers receive input from potentially untrusted sources, so they should:
            /// - Validate all incoming message data
            /// - Handle malformed messages gracefully
            /// - Protect against common attack vectors like JSON injection
            ///
            /// ## Implementation Notes
            ///
            /// - All handlers receive and can update the actor's state
            /// - Errors returned from handlers are logged and may trigger supervision
            /// - Handler execution is tracked in the actor's event chain
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod message_server_client {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Event = super::super::super::super::theater::simple::types::Event;
                pub type ChannelId = super::super::super::super::theater::simple::types::ChannelId;
                pub type ChannelAccept = super::super::super::super::theater::simple::types::ChannelAccept;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_send_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let result2 = T::handle_send(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::Vec::from_raw_parts(arg3.cast(), len1, len1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_send<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_request_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_request(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0, t5_1) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t7_0,) = t5_1;
                            match t7_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr4
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_request<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = i32::from(
                                *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_open_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_channel_open(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0, t5_1) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let (t7_0,) = t5_1;
                            let super::super::super::super::theater::simple::types::ChannelAccept {
                                accepted: accepted8,
                                message: message8,
                            } = t7_0;
                            *ptr4
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match accepted8 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match message8 {
                                Some(e) => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr4
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr4
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len10;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr10.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_open<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    _rt::cabi_dealloc(base8, len8 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l9 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_message_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let result3 = T::handle_channel_message(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            _rt::Vec::from_raw_parts(arg5.cast(), len2, len2),
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0,) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_message<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_channel_close_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::handle_channel_close(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_channel_close<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Handle one-way message
                    ///
                    /// Processes a one-way message that doesn't require a response.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `json` - The message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if message handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_send(state: Option<Value>, params: (Value,)) -> Result<(Option<Value>,), String> {
                    /// let (message,) = params;
                    ///
                    /// // Process the message...
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    fn handle_send(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::Vec<u8>,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    /// # Handle request-response message
                    ///
                    /// Processes a request that requires a response.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `string` - The request ID
                    /// * `json` - The request payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>, (option<list<u8>>,)))` - Tuple containing:
                    /// * Updated actor state (or None)
                    /// * Response message to send back (or None to send a response yet)
                    /// * `Err(string)` - Error message if request handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_request(state: Option<Vec<u8>>, params: (String, Vec<u8>))
                    /// -> Result<(Option<Vec<u8>>, (Option<Vec<u8>>,)), String> {
                    /// let (request_id, request) = params;
                    ///
                    /// // Process the request...
                    /// let response = json!({"status": "success", "data": "result"});
                    ///
                    /// // Return updated state and response
                    /// Ok((Some(updated_state), (Some(response),)))
                    /// }
                    /// ```
                    fn handle_request(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, _rt::Vec<u8>),
                    ) -> Result<
                        (Option<_rt::Vec<u8>>, (Option<_rt::Vec<u8>>,)),
                        _rt::String,
                    >;
                    /// # Handle channel open request
                    ///
                    /// Called when another actor requests to open a communication channel.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `json` - The initial message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>, (channel-accept,)))` - Tuple containing:
                    /// * Updated actor state (or None to retain current state)
                    /// * Channel acceptance decision
                    /// * `Err(string)` - Error message if open handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_open(state: Option<Value>, params: (Value,))
                    /// -> Result<(Option<Value>, (channel_accept,)), String> {
                    /// let (initial_message,) = params;
                    ///
                    /// // Decide whether to accept the channel
                    /// let accept = channel_accept {
                    /// accept: true,
                    /// error_message: None,
                    /// };
                    ///
                    /// // Return updated state and acceptance decision
                    /// Ok((Some(updated_state), (accept,)))
                    /// }
                    /// ```
                    ///
                    /// ## Security
                    ///
                    /// The actor should validate the channel request and only accept channels from
                    /// trusted sources. The acceptance mechanism provides a security checkpoint.
                    fn handle_channel_open(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>, (ChannelAccept,)), _rt::String>;
                    /// # Handle channel message
                    ///
                    /// Processes a message received on an established channel.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `channel-id` - ID of the channel the message was received on
                    /// * `json` - The message payload
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if message handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_message(state: Option<Value>, params: (channel_id, Value))
                    /// -> Result<(Option<Value>,), String> {
                    /// let (channel_id, message) = params;
                    ///
                    /// // Process the channel message...
                    /// println!("Received message on channel {}: {}", channel_id, message);
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    fn handle_channel_message(
                        state: Option<_rt::Vec<u8>>,
                        params: (ChannelId, _rt::Vec<u8>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    /// # Handle channel close
                    ///
                    /// Called when a communication channel is closed.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - The current actor state or None if not initialized
                    /// * `params` - Tuple containing:
                    /// * `channel-id` - ID of the channel that was closed
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok((option<list<u8>>,))` - Updated actor state (or None to retain current state)
                    /// * `Err(string)` - Error message if close handling fails
                    ///
                    /// ## Example
                    ///
                    /// ```rust
                    /// fn handle_channel_close(state: Option<Value>, params: (channel_id,))
                    /// -> Result<(Option<Value>,), String> {
                    /// let (channel_id,) = params;
                    ///
                    /// // Clean up any resources associated with the channel
                    /// println!("Channel {} closed", channel_id);
                    ///
                    /// // Return updated state (or None to keep current state)
                    /// Ok((Some(updated_state),))
                    /// }
                    /// ```
                    ///
                    /// ## Implementation Notes
                    ///
                    /// This function should perform any necessary cleanup for the closed channel,
                    /// such as releasing resources or updating internal state to reflect the channel closure.
                    fn handle_channel_close(
                        state: Option<_rt::Vec<u8>>,
                        params: (ChannelId,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_message_server_client_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/message-server-client#handle-send")] unsafe
                        extern "C" fn export_handle_send(arg0 : i32, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_handle_send_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-send")]
                        unsafe extern "C" fn _post_return_handle_send(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_handle_send::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "theater:simple/message-server-client#handle-request")] unsafe
                        extern "C" fn export_handle_request(arg0 : i32, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : * mut u8,
                        arg6 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_request_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-request")]
                        unsafe extern "C" fn _post_return_handle_request(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_request::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-open")]
                        unsafe extern "C" fn export_handle_channel_open(arg0 : i32, arg1
                        : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : *
                        mut u8, arg6 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_channel_open_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-open")]
                        unsafe extern "C" fn _post_return_handle_channel_open(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_open::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-message")]
                        unsafe extern "C" fn export_handle_channel_message(arg0 : i32,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_channel_message_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-message")]
                        unsafe extern "C" fn _post_return_handle_channel_message(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_message::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/message-server-client#handle-channel-close")]
                        unsafe extern "C" fn export_handle_channel_close(arg0 : i32, arg1
                        : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_channel_close_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/message-server-client#handle-channel-close")]
                        unsafe extern "C" fn _post_return_handle_channel_close(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_channel_close::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_message_server_client_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod supervisor_handlers {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type WitActorError = super::super::super::super::theater::simple::types::WitActorError;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_child_error_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result3 = T::handle_child_error(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            super::super::super::super::theater::simple::types::WitActorError {
                                error_type: super::super::super::super::theater::simple::types::WitErrorType::_lift(
                                    arg5 as u8,
                                ),
                                data: match arg6 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let len2 = arg8;
                                            _rt::Vec::from_raw_parts(arg7.cast(), len2, len2)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            },
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0,) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_child_error<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_child_exit_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result3 = T::handle_child_exit(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (
                            _rt::string_lift(bytes1),
                            match arg5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len2 = arg7;
                                        _rt::Vec::from_raw_parts(arg6.cast(), len2, len2)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        ),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let (t5_0,) = e;
                            match t5_0 {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_child_exit<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_child_external_stop_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let result2 = T::handle_child_external_stop(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    _rt::Vec::from_raw_parts(arg1.cast(), len0, len0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        (_rt::string_lift(bytes1),),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let (t4_0,) = e;
                            match t4_0 {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_child_external_stop<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                        }
                        _ => {
                            let l5 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// # Handle a child actor error
                    ///
                    /// Processes an error from a child actor, allowing the parent to react or log the error.
                    ///
                    /// ## Parameters
                    ///
                    /// * `state` - Optional state of the parent actor (for context)
                    /// * `params` - Tuple containing the child ID and error data
                    ///
                    /// ## Returns
                    ///
                    /// * `Ok(tuple<option<list<u8>>, string>)` - Updated state and result message
                    /// * `Err(string)` - Error message if handling fails
                    fn handle_child_error(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, WitActorError),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    fn handle_child_exit(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String, Option<_rt::Vec<u8>>),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                    fn handle_child_external_stop(
                        state: Option<_rt::Vec<u8>>,
                        params: (_rt::String,),
                    ) -> Result<(Option<_rt::Vec<u8>>,), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_theater_simple_supervisor_handlers_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "theater:simple/supervisor-handlers#handle-child-error")] unsafe
                        extern "C" fn export_handle_child_error(arg0 : i32, arg1 : * mut
                        u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : i32, arg6
                        : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_child_error_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } }
                        #[unsafe (export_name =
                        "cabi_post_theater:simple/supervisor-handlers#handle-child-error")]
                        unsafe extern "C" fn _post_return_handle_child_error(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_child_error::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/supervisor-handlers#handle-child-exit")] unsafe
                        extern "C" fn export_handle_child_exit(arg0 : i32, arg1 : * mut
                        u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : i32, arg6
                        : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_handle_child_exit_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) } } #[unsafe
                        (export_name =
                        "cabi_post_theater:simple/supervisor-handlers#handle-child-exit")]
                        unsafe extern "C" fn _post_return_handle_child_exit(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_child_exit::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "theater:simple/supervisor-handlers#handle-child-external-stop")]
                        unsafe extern "C" fn export_handle_child_external_stop(arg0 :
                        i32, arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_handle_child_external_stop_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_theater:simple/supervisor-handlers#handle-child-external-stop")]
                        unsafe extern "C" fn _post_return_handle_child_external_stop(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_handle_child_external_stop::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_theater_simple_supervisor_handlers_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_default_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::theater::simple::actor::__export_theater_simple_actor_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::theater::simple::actor);
        $($path_to_types_root)*::
        exports::theater::simple::http_handlers::__export_theater_simple_http_handlers_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::theater::simple::http_handlers);
        $($path_to_types_root)*::
        exports::theater::simple::message_server_client::__export_theater_simple_message_server_client_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::theater::simple::message_server_client); $($path_to_types_root)*::
        exports::theater::simple::supervisor_handlers::__export_theater_simple_supervisor_handlers_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::theater::simple::supervisor_handlers);
    };
}
#[doc(inline)]
pub(crate) use __export_default_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:front-chat:default:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6763] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xed3\x01A\x02\x01A-\x01\
B<\x01p}\x04\0\x09json-data\x03\0\0\x01s\x04\0\x0eprogress-token\x03\0\x02\x01s\x04\
\0\x06cursor\x03\0\x04\x01s\x04\0\x0arequest-id\x03\0\x06\x01ks\x01k\x01\x01r\x03\
\x04names\x0bdescription\x08\x04meta\x09\x04\0\x0dbase-metadata\x03\0\x0a\x01r\x04\
\x07jsonrpcs\x06methods\x06params\x09\x02id\x07\x04\0\x0fjsonrpc-request\x03\0\x0c\
\x01r\x03\x07jsonrpcs\x02id\x07\x06result\x01\x04\0\x10jsonrpc-response\x03\0\x0e\
\x01r\x03\x07jsonrpcs\x06methods\x06params\x09\x04\0\x14jsonrpc-notification\x03\
\0\x10\x01r\x03\x04codez\x07messages\x04data\x09\x04\0\x0cerror-object\x03\0\x12\
\x01r\x03\x07jsonrpcs\x02id\x07\x05error\x13\x04\0\x0djsonrpc-error\x03\0\x14\x01\
r\x04\x04types\x04texts\x0bannotations\x09\x04meta\x09\x04\0\x0ctext-content\x03\
\0\x16\x01r\x05\x04types\x04datas\x09mime-type\x08\x0bannotations\x09\x04meta\x09\
\x04\0\x0dimage-content\x03\0\x18\x01r\x05\x04types\x04datas\x09mime-type\x08\x0b\
annotations\x09\x04meta\x09\x04\0\x0daudio-content\x03\0\x1a\x01kw\x01r\x05\x03u\
ris\x09mime-type\x08\x04size\x1c\x0bannotations\x09\x04meta\x09\x04\0\x10resourc\
e-content\x03\0\x1d\x01r\x06\x04names\x0bdescription\x08\x0cinput-schema\x01\x0d\
output-schema\x09\x0bannotations\x09\x04meta\x09\x04\0\x04tool\x03\0\x1f\x01r\x02\
\x04names\x09arguments\x01\x04\0\x10tool-call-params\x03\0!\x01r\x06\x04names\x0b\
description\x08\x03uris\x09mime-type\x08\x0bannotations\x09\x04meta\x09\x04\0\x0c\
mcp-resource\x03\0#\x01k\x17\x01k\x19\x01k\x1b\x01k$\x01q\x05\x04text\x01%\0\x05\
image\x01&\0\x05audio\x01'\0\x08resource\x01\x08\0\x11embedded-resource\x01(\0\x04\
\0\x0ccontent-item\x03\0)\x01p*\x01k\x7f\x01r\x04\x07content+\x12structured-cont\
ent\x09\x08is-error,\x04meta\x09\x04\0\x10tool-call-result\x03\0-\x01r\x04\x03ur\
is\x09mime-type\x08\x07content*\x04meta\x09\x04\0\x15mcp-resource-contents\x03\0\
/\x01k\x05\x01r\x02\x0bnext-cursor1\x04meta\x09\x04\0\x10paginated-result\x03\02\
\x01p\x20\x01r\x03\x05tools4\x0bnext-cursor1\x04meta\x09\x04\0\x11list-tools-res\
ult\x03\05\x01p$\x01r\x03\x09resources7\x0bnext-cursor1\x04meta\x09\x04\0\x15lis\
t-resources-result\x03\08\x01r\x02\x06cursor1\x04meta\x09\x04\0\x11paginated-req\
uest\x03\0:\x03\0\x1dcolinrozzi:mcp-protocol/types\x05\0\x02\x03\0\0\x04tool\x02\
\x03\0\0\x09json-data\x01B*\x02\x03\x02\x01\x01\x04\0\x04tool\x03\0\0\x02\x03\x02\
\x01\x02\x04\0\x09json-data\x03\0\x02\x01q\x03\x04user\0\0\x09assistant\0\0\x06s\
ystem\0\0\x04\0\x0cmessage-role\x03\0\x04\x01r\x03\x02ids\x04names\x05input\x03\x04\
\0\x08tool-use\x03\0\x06\x01r\x03\x0btool-use-ids\x07content\x03\x08is-error\x7f\
\x04\0\x0btool-result\x03\0\x08\x01q\x03\x04text\x01s\0\x08tool-use\x01\x07\0\x0b\
tool-result\x01\x09\0\x04\0\x0fmessage-content\x03\0\x0a\x01p\x0b\x01r\x02\x04ro\
le\x05\x07content\x0c\x04\0\x07message\x03\0\x0d\x01q\x04\x04auto\0\0\x03any\0\0\
\x04none\0\0\x08specific\x01s\0\x04\0\x0btool-choice\x03\0\x0f\x01p\x0e\x01kv\x01\
ks\x01p\x01\x01k\x14\x01k\x10\x01k\x7f\x01r\x08\x05models\x08messages\x11\x0amax\
-tokensy\x0btemperature\x12\x06system\x13\x05tools\x15\x0btool-choice\x16\x19dis\
able-parallel-tool-use\x17\x04\0\x12completion-request\x03\0\x18\x01q\x05\x08end\
-turn\0\0\x0amax-tokens\0\0\x0dstop-sequence\0\0\x08tool-use\0\0\x05other\x01s\0\
\x04\0\x0bstop-reason\x03\0\x1a\x01r\x02\x0cinput-tokensy\x0doutput-tokensy\x04\0\
\x05usage\x03\0\x1c\x01r\x06\x07content\x0c\x02ids\x05models\x04role\x05\x0bstop\
-reason\x1b\x05usage\x1d\x04\0\x13completion-response\x03\0\x1e\x01r\x02\x0binpu\
t-priceu\x0coutput-priceu\x04\0\x0dmodel-pricing\x03\0\x20\x01k!\x01r\x05\x02ids\
\x0cdisplay-names\x0amax-tokensy\x08providers\x07pricing\"\x04\0\x0amodel-info\x03\
\0#\x01q\x02\x0blist-models\0\0\x13generate-completion\x01\x19\0\x04\0\x0dproxy-\
request\x03\0%\x01p$\x01q\x03\x0blist-models\x01'\0\x0acompletion\x01\x1f\0\x05e\
rror\x01s\0\x04\0\x0eproxy-response\x03\0(\x03\0\x1ccolinrozzi:genai-types/types\
\x05\x03\x01B\x16\x01s\x04\0\x08actor-id\x03\0\0\x01s\x04\0\x0achannel-id\x03\0\x02\
\x01p}\x01k\x04\x01r\x02\x08accepted\x7f\x07message\x05\x04\0\x0echannel-accept\x03\
\0\x06\x01kw\x01r\x03\x0aevent-types\x06parent\x08\x04data\x04\x04\0\x05event\x03\
\0\x09\x01r\x02\x04hashw\x05event\x0a\x04\0\x0ameta-event\x03\0\x0b\x01p\x0c\x01\
r\x01\x06events\x0d\x04\0\x05chain\x03\0\x0e\x01r\x05\x04hash\x04\x0bparent-hash\
\x05\x0aevent-types\x04data\x04\x09timestampw\x04\0\x0bchain-event\x03\0\x10\x01\
m\x09\x11operation-timeout\x0echannel-closed\x0dshutting-down\x12function-not-fo\
und\x0dtype-mismatch\x08internal\x13serialization-error\x16update-component-erro\
r\x06paused\x04\0\x0ewit-error-type\x03\0\x12\x01r\x02\x0aerror-type\x13\x04data\
\x05\x04\0\x0fwit-actor-error\x03\0\x14\x03\0\x14theater:simple/types\x05\x04\x02\
\x03\0\x02\x05chain\x02\x03\0\x02\x08actor-id\x01B\x0d\x02\x03\x02\x01\x05\x04\0\
\x05chain\x03\0\0\x02\x03\x02\x01\x06\x04\0\x08actor-id\x03\0\x02\x01@\x01\x03ms\
gs\x01\0\x04\0\x03log\x01\x04\x01@\0\0\x01\x04\0\x09get-chain\x01\x05\x01p}\x01k\
\x06\x01j\0\x01s\x01@\x01\x04data\x07\0\x08\x04\0\x08shutdown\x01\x09\x03\0\x16t\
heater:simple/runtime\x05\x07\x01B\x14\x01p}\x04\0\x05bytes\x03\0\0\x01o\x02ss\x01\
p\x02\x01k\x01\x01r\x04\x06methods\x03uris\x07headers\x03\x04body\x04\x04\0\x0ch\
ttp-request\x03\0\x05\x01r\x03\x06status{\x07headers\x03\x04body\x04\x04\0\x0dht\
tp-response\x03\0\x07\x01r\x02\x09cert-paths\x08key-paths\x04\0\x0atls-config\x03\
\0\x09\x01k{\x01ks\x01k\x0a\x01r\x03\x04port\x0b\x04host\x0c\x0atls-config\x0d\x04\
\0\x0dserver-config\x03\0\x0e\x01r\x07\x02idw\x04port{\x04hosts\x07running\x7f\x0c\
routes-county\x10middleware-county\x11websocket-enabled\x7f\x04\0\x0bserver-info\
\x03\0\x10\x01r\x02\x07proceed\x7f\x07request\x06\x04\0\x11middleware-result\x03\
\0\x12\x03\0\x19theater:simple/http-types\x05\x08\x01B\x07\x01q\x07\x04text\0\0\x06\
binary\0\0\x07connect\0\0\x05close\0\0\x04ping\0\0\x04pong\0\0\x05other\x01s\0\x04\
\0\x0cmessage-type\x03\0\0\x01p}\x01k\x02\x01ks\x01r\x03\x02ty\x01\x04data\x03\x04\
text\x04\x04\0\x11websocket-message\x03\0\x05\x03\0\x1etheater:simple/websocket-\
types\x05\x09\x02\x03\0\x04\x0chttp-request\x02\x03\0\x04\x0dhttp-response\x02\x03\
\0\x04\x0dserver-config\x02\x03\0\x04\x0bserver-info\x02\x03\0\x04\x0atls-config\
\x02\x03\0\x05\x11websocket-message\x01B5\x02\x03\x02\x01\x0a\x04\0\x0chttp-requ\
est\x03\0\0\x02\x03\x02\x01\x0b\x04\0\x0dhttp-response\x03\0\x02\x02\x03\x02\x01\
\x0c\x04\0\x0dserver-config\x03\0\x04\x02\x03\x02\x01\x0d\x04\0\x0bserver-info\x03\
\0\x06\x02\x03\x02\x01\x0e\x04\0\x0atls-config\x03\0\x08\x02\x03\x02\x01\x0f\x04\
\0\x11websocket-message\x03\0\x0a\x01w\x04\0\x09server-id\x03\0\x0c\x01w\x04\0\x0a\
handler-id\x03\0\x0e\x01w\x04\0\x08route-id\x03\0\x10\x01w\x04\0\x0dmiddleware-i\
d\x03\0\x12\x01j\x01\x0d\x01s\x01@\x01\x06config\x05\0\x14\x04\0\x0dcreate-serve\
r\x01\x15\x01j\x01\x07\x01s\x01@\x01\x09server-id\x0d\0\x16\x04\0\x0fget-server-\
info\x01\x17\x01j\x01{\x01s\x01@\x01\x09server-id\x0d\0\x18\x04\0\x0cstart-serve\
r\x01\x19\x01j\0\x01s\x01@\x01\x09server-id\x0d\0\x1a\x04\0\x0bstop-server\x01\x1b\
\x04\0\x0edestroy-server\x01\x1b\x01j\x01\x0f\x01s\x01@\x01\x0chandler-names\0\x1c\
\x04\0\x10register-handler\x01\x1d\x01j\x01\x11\x01s\x01@\x04\x09server-id\x0d\x04\
paths\x06methods\x0ahandler-id\x0f\0\x1e\x04\0\x09add-route\x01\x1f\x01@\x01\x08\
route-id\x11\0\x1a\x04\0\x0cremove-route\x01\x20\x01j\x01\x13\x01s\x01@\x03\x09s\
erver-id\x0d\x04paths\x0ahandler-id\x0f\0!\x04\0\x0eadd-middleware\x01\"\x01@\x01\
\x0dmiddleware-id\x13\0\x1a\x04\0\x11remove-middleware\x01#\x01k\x0f\x01@\x05\x09\
server-id\x0d\x04paths\x12connect-handler-id$\x12message-handler-id\x0f\x15disco\
nnect-handler-id$\0\x1a\x04\0\x10enable-websocket\x01%\x01@\x03\x09server-id\x0d\
\x0dconnection-idw\x07message\x0b\0\x1a\x04\0\x16send-websocket-message\x01&\x01\
@\x02\x09server-id\x0d\x0dconnection-idw\0\x1a\x04\0\x0fclose-websocket\x01'\x03\
\0\x1dtheater:simple/http-framework\x05\x10\x02\x03\0\x02\x0bchain-event\x01B\x17\
\x02\x03\x02\x01\x11\x04\0\x0bchain-event\x03\0\0\x01p}\x01k\x02\x01j\x01s\x01s\x01\
@\x02\x08manifests\x0ainit-bytes\x03\0\x04\x04\0\x05spawn\x01\x05\x01@\x02\x08ma\
nifests\x0ainit-state\x03\0\x04\x04\0\x06resume\x01\x06\x01ps\x01@\0\0\x07\x04\0\
\x0dlist-children\x01\x08\x01j\0\x01s\x01@\x01\x08child-ids\0\x09\x04\0\x0astop-\
child\x01\x0a\x04\0\x0drestart-child\x01\x0a\x01j\x01\x03\x01s\x01@\x01\x08child\
-ids\0\x0b\x04\0\x0fget-child-state\x01\x0c\x01p\x01\x01j\x01\x0d\x01s\x01@\x01\x08\
child-ids\0\x0e\x04\0\x10get-child-events\x01\x0f\x03\0\x19theater:simple/superv\
isor\x05\x12\x01B\x0d\x01p}\x01j\x01\0\x01s\x01@\x01\x06lengthy\0\x01\x04\0\x0cr\
andom-bytes\x01\x02\x01j\x01w\x01s\x01@\x02\x03minw\x03maxw\0\x03\x04\0\x0crando\
m-range\x01\x04\x01j\x01u\x01s\x01@\0\0\x05\x04\0\x0crandom-float\x01\x06\x01j\x01\
s\x01s\x01@\0\0\x07\x04\0\x0dgenerate-uuid\x01\x08\x03\0\x15theater:simple/rando\
m\x05\x13\x02\x03\0\x02\x0achannel-id\x01B\x19\x02\x03\x02\x01\x06\x04\0\x08acto\
r-id\x03\0\0\x02\x03\x02\x01\x14\x04\0\x0achannel-id\x03\0\x02\x01p}\x01j\0\x01s\
\x01@\x02\x08actor-id\x01\x03msg\x04\0\x05\x04\0\x04send\x01\x06\x01j\x01\x04\x01\
s\x01@\x02\x08actor-id\x01\x03msg\x04\0\x07\x04\0\x07request\x01\x08\x01j\x01\x03\
\x01s\x01@\x02\x08actor-id\x01\x0binitial-msg\x04\0\x09\x04\0\x0copen-channel\x01\
\x0a\x01@\x02\x0achannel-id\x03\x03msg\x04\0\x05\x04\0\x0fsend-on-channel\x01\x0b\
\x01@\x01\x0achannel-id\x03\0\x05\x04\0\x0dclose-channel\x01\x0c\x01ps\x01@\0\0\x0d\
\x04\0\x19list-outstanding-requests\x01\x0e\x01@\x02\x0arequest-ids\x08response\x04\
\0\x05\x04\0\x12respond-to-request\x01\x0f\x01@\x01\x0arequest-ids\0\x05\x04\0\x0e\
cancel-request\x01\x10\x03\0\"theater:simple/message-server-host\x05\x15\x01B\x07\
\x01p}\x01k\0\x01o\x01s\x01o\x01\x01\x01j\x01\x03\x01s\x01@\x02\x05state\x01\x06\
params\x02\0\x04\x04\0\x04init\x01\x05\x04\0\x14theater:simple/actor\x05\x16\x02\
\x03\0\x04\x11middleware-result\x02\x03\0\x06\x0ahandler-id\x01B'\x02\x03\x02\x01\
\x0a\x04\0\x0chttp-request\x03\0\0\x02\x03\x02\x01\x0b\x04\0\x0dhttp-response\x03\
\0\x02\x02\x03\x02\x01\x0f\x04\0\x11websocket-message\x03\0\x04\x02\x03\x02\x01\x17\
\x04\0\x11middleware-result\x03\0\x06\x02\x03\x02\x01\x18\x04\0\x0ahandler-id\x03\
\0\x08\x01p}\x01k\x0a\x01o\x02\x09\x01\x01o\x01\x03\x01o\x02\x0b\x0d\x01j\x01\x0e\
\x01s\x01@\x02\x05state\x0b\x06params\x0c\0\x0f\x04\0\x0ehandle-request\x01\x10\x01\
o\x01\x07\x01o\x02\x0b\x11\x01j\x01\x12\x01s\x01@\x02\x05state\x0b\x06params\x0c\
\0\x13\x04\0\x11handle-middleware\x01\x14\x01ks\x01o\x04\x09ws\x15\x01o\x01\x0b\x01\
j\x01\x17\x01s\x01@\x02\x05state\x0b\x06params\x16\0\x18\x04\0\x18handle-websock\
et-connect\x01\x19\x01o\x03\x09w\x05\x01p\x05\x01o\x01\x1b\x01o\x02\x0b\x1c\x01j\
\x01\x1d\x01s\x01@\x02\x05state\x0b\x06params\x1a\0\x1e\x04\0\x18handle-websocke\
t-message\x01\x1f\x01o\x02\x09w\x01@\x02\x05state\x0b\x06params\x20\0\x18\x04\0\x1b\
handle-websocket-disconnect\x01!\x04\0\x1ctheater:simple/http-handlers\x05\x19\x02\
\x03\0\x02\x05event\x02\x03\0\x02\x0echannel-accept\x01B\x1d\x02\x03\x02\x01\x1a\
\x04\0\x05event\x03\0\0\x02\x03\x02\x01\x14\x04\0\x0achannel-id\x03\0\x02\x02\x03\
\x02\x01\x1b\x04\0\x0echannel-accept\x03\0\x04\x01p}\x01k\x06\x01o\x01\x06\x01o\x01\
\x07\x01j\x01\x09\x01s\x01@\x02\x05state\x07\x06params\x08\0\x0a\x04\0\x0bhandle\
-send\x01\x0b\x01o\x02s\x06\x01o\x02\x07\x09\x01j\x01\x0d\x01s\x01@\x02\x05state\
\x07\x06params\x0c\0\x0e\x04\0\x0ehandle-request\x01\x0f\x01o\x01\x05\x01o\x02\x07\
\x10\x01j\x01\x11\x01s\x01@\x02\x05state\x07\x06params\x0c\0\x12\x04\0\x13handle\
-channel-open\x01\x13\x01o\x02\x03\x06\x01@\x02\x05state\x07\x06params\x14\0\x0a\
\x04\0\x16handle-channel-message\x01\x15\x01o\x01\x03\x01@\x02\x05state\x07\x06p\
arams\x16\0\x0a\x04\0\x14handle-channel-close\x01\x17\x04\0$theater:simple/messa\
ge-server-client\x05\x1c\x02\x03\0\x02\x0fwit-actor-error\x01B\x0f\x02\x03\x02\x01\
\x1d\x04\0\x0fwit-actor-error\x03\0\0\x01p}\x01k\x02\x01o\x02s\x01\x01o\x01\x03\x01\
j\x01\x05\x01s\x01@\x02\x05state\x03\x06params\x04\0\x06\x04\0\x12handle-child-e\
rror\x01\x07\x01o\x02s\x03\x01@\x02\x05state\x03\x06params\x08\0\x06\x04\0\x11ha\
ndle-child-exit\x01\x09\x01o\x01s\x01@\x02\x05state\x03\x06params\x0a\0\x06\x04\0\
\x1ahandle-child-external-stop\x01\x0b\x04\0\"theater:simple/supervisor-handlers\
\x05\x1e\x04\0\x1ccomponent:front-chat/default\x04\0\x0b\x0d\x01\0\x07default\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
